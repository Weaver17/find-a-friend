// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  email         String        @unique
  name          String
  emailVerified Boolean       @default(false)
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]
  SavedFriend   SavedFriend[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model SavedFriend {
  saved_id             String        @id @default(cuid())
  id                   Int           @unique
  userId               String
  user                 User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  organizationId       String
  url                  String
  type                 String
  species              String
  breeds               Breeds?
  colors               Colors?
  age                  String
  gender               String
  size                 String
  coat                 String
  attributes           Attributes?
  environment          Environment?
  tags                 String[]
  name                 String
  description          String
  organizationAnimalId String?
  photos               Photo[]
  primaryPhotoCropped  PrimaryPhoto?
  videos               Video[]
  status               String
  statusChangedAt      DateTime
  publishedAt          DateTime
  distance             Float?
  contact              Contact?
  links                Links?
  createdAt            DateTime      @default(now())
  photoId              String?

  @@index([userId])
}

model Breeds {
  id        String  @id
  primary   String
  secondary String?
  mixed     Boolean
  unknown   Boolean

  savedFriend SavedFriend @relation(fields: [id], references: [saved_id], onDelete: Cascade)
}

model Colors {
  id          String      @id
  primary     String
  secondary   String?
  tertiary    String?
  savedFriend SavedFriend @relation(fields: [id], references: [saved_id], onDelete: Cascade)
}

model Attributes {
  id             String      @id
  spayedNeutered Boolean
  houseTrained   Boolean
  declawed       Boolean?
  specialNeeds   Boolean
  shotsCurrent   Boolean
  savedFriend    SavedFriend @relation(fields: [id], references: [saved_id], onDelete: Cascade)
}

model Environment {
  id          String      @id
  children    Boolean
  dogs        Boolean
  cats        Boolean
  savedFriend SavedFriend @relation(fields: [id], references: [saved_id], onDelete: Cascade)
}

model Photo {
  id          String       @id
  small       String
  medium      String
  large       String
  full        String
  savedFriend SavedFriend? @relation(fields: [id], references: [saved_id], onDelete: Cascade)
}

model PrimaryPhoto {
  id          String       @id
  small       String
  medium      String
  large       String
  full        String
  savedFriend SavedFriend? @relation(fields: [id], references: [saved_id])
}

model Contact {
  id          String      @id
  email       String
  phone       String
  address     Address?
  savedFriend SavedFriend @relation(fields: [id], references: [saved_id], onDelete: Cascade)
}

model Address {
  id       String  @id
  address1 String?
  address2 String?
  city     String
  state    String
  postcode String
  country  String
  contact  Contact @relation(fields: [id], references: [id], onDelete: Cascade)
}

model Links {
  id          String      @id
  savedFriend SavedFriend @relation(fields: [id], references: [saved_id], onDelete: Cascade)

  self         Json
  type         Json
  organization Json
}

model Video {
  id          String      @id
  embed       String
  SavedFriend SavedFriend @relation(fields: [id], references: [saved_id], onDelete: Cascade)
}
